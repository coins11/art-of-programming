;5-3
(define-struct add (left right))
(define-struct sub (left right))
(define-struct mul (left right))
(define-struct div (left right))
(define-struct num (val))
(define-struct var (name))
(define (fold-right kons knil l)
  (if (null? l) knil (kons (car l) (fold-right kons knil (cdr l)))))
(define (filter pred l) (fold-right (lambda (x l) (if (pred x) (cons x l) l)) [] l))
(define (myeval env term)
  (define (merec term)
    (cond
      ((add? term) (+ (merec (add-left term)) (merec (add-right term))))
      ((sub? term) (- (merec (sub-left term)) (merec (sub-right term))))
      ((mul? term) (* (merec (mul-left term)) (merec (mul-right term))))
      ((div? term)
        (let ((l (merec (div-left term))) (r (merec (div-right term))))
             (if (= 0 r) 0 (/ l r))))
      ((num? term) (num-val term))
      ((var? term)
        (let ((l (filter (lambda (e) (eq? (var-name term) (car e))) env)))
             (if (null? l) 0 (cadar l))))))
  (merec term))
