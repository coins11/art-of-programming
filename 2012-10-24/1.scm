;7-1
(define (sigma a b f)
    (if (> a b) 0 (+ (f a) (sigma (+ 1 a) b f))))
(define (find pred clist)
    (cond
        ((null? clist) 'Not_found)
        ((pred (car clist)) (car clist))
        (else (find pred (cdr clist)))))
(define (for-all? pred clist)
    (cond
        ((null? clist) #t)
        ((pred (car clist)) (for-all? pred (cdr clist)))
        (else #f)))
(define (exist? pred clist)
    (cond
        ((null? clist) #f)
        ((pred (car clist)) #t)
        (else (exist? pred (cdr clist)))))
(define (make-list n f)
    (define (mlr n r)
        (if (eq? 0 n) r (mlr (- n 1) (cons (f (- n 1)) r))))
    (mlr n '()))
(define (fold-left kons knil clist)
    (if (null? clist)
        knil (fold-left kons (kons (car clist) knil) (cdr clist))))
(define (fold-right kons knil clist)
    (if (null? clist)
        knil (kons (car clist) (fold-right kons knil (cdr clist)))))
(define (partition pred clist)
    (define (phi x pair)
        (if (pred x)
            (list (cons x (car pair)) (cadr pair))
            (list (car pair) (cons x (cadr pair)))))
    (fold-right phi '(() ()) clist))
